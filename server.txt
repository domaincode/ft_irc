#include "server.hpp"

Server::~Server()
{
    std::cout << "Server Destructor Called\n";
}

Server::Server(int port)
{
    std::cout << "Server Constructor Called\n";

    N.serverSocket = socket(AF_INET, SOCK_STREAM, 0);
    if(N.serverSocket < 0)
    {
        std::cout << "Error: Func ==> Socket\n";
        exit(1);
    }
    N.sAddress.sin_family = AF_INET;
    N.sAddress.sin_port = htons(port);
    N.sAddress.sin_addr.s_addr = 0; //INADDR_ANY
    
    std::cout << "Bind: " ;
    std::cout << (bind(N.serverSocket, (sockaddr* )&N.sAddress, sizeof(N.sAddress)) < 0 ? "Failed\n": "Success\n");


    std::cout << "Listen: " ;
    std::cout << (listen(N.serverSocket, 2) < 0 ? "Failed\n": "Success\n"); 

}

void Server::Accept_connection()
{
    std::string msg;
    char test[1024];
    int client_fd;


    std::cout << "wait1: ";
    std::getline(std::cin, msg);
    std::cout << "Accept: " ;
    client_fd = accept(N.serverSocket, NULL, NULL);
    std::cout << (client_fd < 0 ? "Failed\n": "Success\n");
    N.clients_fd.push_back(client_fd);

    std::cout << "wait2: ";
    std::getline(std::cin, msg);
    std::cout << "Accept: " ;
    client_fd = accept(N.serverSocket, NULL, NULL);
    std::cout << (client_fd < 0 ? "Failed\n": "Success\n");
    N.clients_fd.push_back(client_fd);

    for(unsigned int i = 0; i < N.clients_fd.size(); i++)
    {
        recv(N.clients_fd[i], test, 1024, 0);
        msg.append(test);
        msg.append("Client ");
        msg.append(std::to_string(i + 1));
        msg.append(" connected\n");
    }

    std::cout << "blablabla: " << msg;

}
